//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

use super::{
    clauses::{ClauseModel, NewClauseWithoutRule},
    rule_attribute_attributevalue::{
        NewRuleAttributeAttributeValueWithoutRuleModel, RuleAttributeAttributeValueModel,
    },
    rule_question_answer::{NewRuleQuestionAnswerWithoutRuleModel, RuleQuestionAnswerModel},
};

#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, DeriveEntityModel, Eq, ToSchema)]
#[schema(as = RuleModel)]
#[sea_orm(table_name = "rules")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    #[schema(read_only)]
    pub id: i32,
    pub system_id: i32,
    pub attribute_rule: bool,
}

pub use Model as RuleModel;

#[derive(Clone, Debug, Serialize, Deserialize, ToSchema)]
pub struct RuleWithClausesAndEffects {
    pub id: i32,
    pub system_id: i32,
    pub attribute_rule: bool,
    pub clauses: Vec<ClauseModel>,
    pub rule_question_answer_ids: Vec<RuleQuestionAnswerModel>,
    pub rule_attribute_attributevalue_ids: Vec<RuleAttributeAttributeValueModel>,
}

#[derive(Clone, Debug, Serialize, Deserialize, ToSchema)]
pub struct NewRuleWithClausesAndEffects {
    pub system_id: i32,
    pub attribute_rule: bool,
    pub clauses: Vec<NewClauseWithoutRule>,
    pub rule_question_answer_ids: Vec<NewRuleQuestionAnswerWithoutRuleModel>,
    pub rule_attribute_attributevalue_ids: Vec<NewRuleAttributeAttributeValueWithoutRuleModel>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::clauses::Entity")]
    Clauses,
    #[sea_orm(has_many = "super::rule_attribute_attributevalue::Entity")]
    RuleAttributeAttributevalue,
    #[sea_orm(has_many = "super::rule_question_answer::Entity")]
    RuleQuestionAnswer,
    #[sea_orm(
        belongs_to = "super::systems::Entity",
        from = "Column::SystemId",
        to = "super::systems::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Systems,
}

impl Related<super::clauses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Clauses.def()
    }
}

impl Related<super::rule_attribute_attributevalue::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RuleAttributeAttributevalue.def()
    }
}

impl Related<super::rule_question_answer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RuleQuestionAnswer.def()
    }
}

impl Related<super::systems::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Systems.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
