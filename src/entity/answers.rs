//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, DeriveEntityModel, Eq, ToSchema)]
#[schema(as = AnswerModel)]
#[sea_orm(table_name = "answers")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[schema(read_only)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub question_id: i32,
    pub body: String,
}
pub use Model as AnswerModel;

#[derive(Clone, Debug, Serialize, Deserialize, DeriveIntoActiveModel, ToSchema)]
pub struct UpdateAnswerModel {
    pub id: i32,
    pub body: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::questions::Entity",
        from = "Column::QuestionId",
        to = "super::questions::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Questions,
    #[sea_orm(has_many = "super::rule_question_answer::Entity")]
    RuleQuestionAnswer,
}

impl Related<super::questions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Questions.def()
    }
}

impl Related<super::rule_question_answer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RuleQuestionAnswer.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
