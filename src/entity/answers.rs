//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

#[derive(Clone, Debug, Serialize, Deserialize, PartialEq, DeriveEntityModel, Eq, ToSchema)]
#[sea_orm(table_name = "answers")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub question_id: i32,
    pub body: String,
}

#[derive(Clone, Debug, Serialize, Deserialize, DeriveIntoActiveModel, ToSchema)]
pub struct UpdateAnswerModel {
    pub id: i32,
    pub body: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::questions::Entity",
        from = "Column::QuestionId",
        to = "super::questions::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Questions,
    #[sea_orm(has_many = "super::rule_question_answer::Entity")]
    RuleQuestionAnswer,
}

impl Related<super::questions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Questions.def()
    }
}

impl Related<super::rule_question_answer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RuleQuestionAnswer.def()
    }
}

impl ActiveModelBehavior for ActiveModel {
    // #[doc = " Create a new ActiveModel with default values. Also used by `Default::default()`."]
    // fn new() -> Self {
    //     <Self as ActiveModelTrait>::default()
    // }

    // #[doc = " Will be called after `ActiveModel::insert`, `ActiveModel::update`, and `ActiveModel::save`"]
    // #[must_use]
    // #[allow(
    //     clippy::async_yields_async,
    //     clippy::diverging_sub_expression,
    //     clippy::let_unit_value,
    //     clippy::no_effect_underscore_binding,
    //     clippy::shadow_same,
    //     clippy::type_complexity,
    //     clippy::type_repetition_in_bounds,
    //     clippy::used_underscore_binding
    // )]
    // fn after_save<'life0, 'async_trait, C>(
    //     model: <Self::Entity as EntityTrait>::Model,
    //     db: &'life0 C,
    //     insert: bool,
    // ) -> ::core::pin::Pin<
    //     Box<
    //         dyn ::core::future::Future<Output = Result<<Self::Entity as EntityTrait>::Model, DbErr>>
    //             + ::core::marker::Send
    //             + 'async_trait,
    //     >,
    // >
    // where
    //     C: ConnectionTrait + TransactionTrait,
    //     C: 'async_trait,
    //     'life0: 'async_trait,
    //     Self: ::core::marker::Send + 'async_trait,
    // {
    //     Box::pin(async move {
    //         if let ::core::option::Option::Some(__ret) =
    //             ::core::option::Option::None::<Result<<Self::Entity as EntityTrait>::Model, DbErr>>
    //         {
    //             #[allow(unreachable_code)]
    //             return __ret;
    //         }
    //         let model = model;
    //         let insert = insert;
    //         let __ret: Result<<Self::Entity as EntityTrait>::Model, DbErr> = { Ok(model) };
    //         #[allow(unreachable_code)]
    //         __ret
    //     })
    // }
}
